================================================================< GIT COMMANDS >====================================================================
merging:
========
git clone "<clone url>"
git branch
git checkout <source>
git pull origin <source>
git checkout <desi>
git pull origin qa
git merge dev
git status
git add -i
git status
git commit -m "..........."
git push origin qa
tag:[tagSyntax-------branchName_version.task.bug_MONDD]
====
git tag -a Prod_1.2.11_OCT17 -m "merged qa to master"
git push origin Prod_1.2.11_OCT17

deleting a tag:
==============
git tag -d beta
git push origin --delete beta


git:
===
Create a new branch:
git checkout -b feature_branch_name
Edit, add and commit your files.
Push your branch to the remote repository:
git push -u origin feature_branch_name

usefull:
=======
git diff --color-words ----->[shows difference between merged branches]
================================================================< LINUX COMMANDS >====================================================================

create admin new user using git bash in centos mechine:
=================================================
1.create ec2 instance
2.save filename.pem file in your pc
3.go to file location-->right click-->click on "git bash here"
4.ssh -i "db-testing.pem" centos@ec2-13-232-115-66.ap-south-1.compute.amazonaws.com  [change root to centos user]
5.sudo -s [change to root user]
6.enable port-22 and PasswordAuthentication - yes 
  *vi /etc/ssh/sshd_config 
  *service sshd restart/systemctl restart sshd
7.adduser username
8.passwd username[enter and confirm password]
9.usermod -aG wheel username[members of the wheel group have sudo privileges]
10.su - username[Test sudo access on new user account]
11.sudo ls -la /root[only accessible to the root user.]

12.timedatectl set-timezone Asia/Kolkata changing time zone


from linux server:
ssh -p 15951 -i pem-file-name.pem centos@10.0.0.89

dbuser {Dru@999}


vi editor:
=========
i  - insert mode
q! - dont save
wq - save and quit

G  - end of file
1G - start of file
$  - end of line	
^  - start of line
%  - blocks matching
:/searchword [enter][n-next occurence]
:%s/oldword/replacingword/g ---in all occurences of old word
:%s/oldword/replacingword/  ---first occurence
commands:
=========
[cd -]  last working directory
[cd ~]  user home directory		
mkdir -p x/y/z [creating nested folders]												
logs:
====
tail -222f /logs/report.json

changing hostname:
==================
hostnamectl set-hostname your-new-hostname

login into remote server:
=========================
ssh -p portno username@IP/dns

executing command in remote-server:
===================================
ssh -p portno username@IP/dns command
ssh -p 15951 drucareqa@10.0.2.103 'python test.py veer'     [asks pwd]
sshpass -p 'pwd'  ssh -p 15951 drucareqa@10.0.2.103 'python test.py veer' [passing pwd in command using sshpass]

renaming:
=========
mv oldname newname

deleting:
========
deleting empty directory------------------------->rmdir directoryName
deleting non-empty directory--------------------->rm -r directoryName [or] rm -rf directoryName
deleting a file---------------------------------->rm filename  		  [or] rm -f filename
 
 
 mkdir -p /home/user/mysite/{public_html/{css,js,images},logs}
 ---That will create a folder structure like this one:
	/home/user/mysite/public_html/css
	/home/user/mysite/public_html/js
	/home/user/mysite/public_html/images
	/home/user/mysite/logs


copying directory to remote server:
===================================
scp -P portno -r path/to/directory  username@IP:/destination/path
scp -P 15951 -r ./deploy veer.n@13.233.123.16:/home/veer.n/       [deploy directory is copied into destination]

copying file to remote server:
===================================
scp -P portno path/to/file username@IP:/destination/path
scp -P 15951 file.txt veer.n@13.233.123.16:/home/veer.n/       [deploy directory is copied into destination]

memory information:
==================
df -h  ------------------------[free disk space]
du -h  ------------------------[used disk space]
du -h /opt/app/jarbackup-------[size of any directory]
du -sh  <foldername>
free -h -----------------------[free ram space]
sudo du -h / | sort -rh | head -10

http://fuzzyblog.io/blog/docker/2017/08/30/running-out-of-disc-space-with-docker.html

timedatectl set-timezone Asia/Kolkata changing time zone

exporting a port in centos:
===========================
rootusers.com/how-to-open-a-port-in-centos-7-with-firewalld/
www.rootusers.com
How To Open A Port In CentOS 7 With Firewalld

contos java installation:
===========================

yum check-update
yum upgrade
yum clean all
yum install nano wget curl net-tools lsof bash-completion

wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2Ftechnetwork%2Fjava%2Fjavase%2Fdownloads%2Fjdk8-downloads-2133151.html; oraclelicense=accept-securebackup-cookie;" "download.oracle.com/otn-pub/java/jdk/8u201-b09/42970487e3af4f5aa5bca3f542482c60/jdk-8u201-linux-x64.rpm"
download.oracle.com
Unauthorized Request

sudo sh -c "echo export JAVA_HOME=/usr/java/jdk1.8.0_201-amd64/jre >> /etc/environment"

jenkins admin login:
===================
/var/lib/jenkins/secrets/initialAdminPassword

jenkins:      
========
passphrase:

add ssh server

Name	Dev Server
Hostname 49.207.6.227
Username jenkins

check password authentication

Passphrase / Password       *********
Port                        2233
Timeout (ms)                300000
Proxy port                  0

cronjob:
=======
on 1st day of every month::::::::::cron job::::::::::::::[0 0 1 * * /usr/bin/python /home/drucareqa/logszip/logszipping.py]

mail file----------------------/var/mail/$USERNAME or /var/spool/mail/username
file location-----------------/etc/crontab
logs--------------------------/var/log/cron

/usr/lib/cron/cron.allow
/usr/lib/cron/cron.deny


permissions for root user:
=========================
for giving permissions on few commands add below line to "sudoers" file by using "sudo visudo" command
->username ALL = NOPASSWD: /usr/bin/mv, /usr/sbin/service, /usr/bin/kill       
->username ALL=(ALL) NOPASSWD:ALL  ------------[permissions on all commands]


OS HARDENIG:
============
https://www.tecmint.com/security-and-hardening-centos-7-guide/
https://www.tecmint.com/centos-7-hardening-and-security-guide/


13. Remove Unnecessary Software Packages
rpm -qa   --------------------------------------------Verify installed packages
yum list installed >> installed.txt-------------------Verify installed packages
yum remove package_name-------------------------------delete a package


15. Remove Unneeded Services
# ss -tulpn
# systemctl list-units -t service
# yum remove service-name


27. Lock Accounts
lock:
# passwd -l username ---------------user cannot login 
# usermod -L username
unlock:
# passwd -u username  
# usermod -U username

28.Prevent Accounts Shell Access:[/usr/sbin/nologin or /bin/false]
# usermod -s /bin/false username-----------------------user cannot login
or
# useradd -s /usr/sbin/nologin username

# chage -d 0 username[ immediate password expiration (user must change password on next login)]


29.POSIX ACLs 
# setfacl -m u:user:rw file-------------change user permissions
# getfacl file

Disable SSH Root Login:
#vi /etc/ssh/sshd_config----->PermitRootLogin no
#systemctl restart sshd

Allowing Users:
add  below property to allow particular users in "/etc/ssh/sshd_config" file
{AllowUsers username1 username2} 
#systemctl restart sshd

/var/log/secure
/etc/hosts.deny 


error:no tty present and no askpass program specified
solution:
Use NOPASSWD line for all commands, I mean:
jenkins ALL=(ALL) NOPASSWD: ALL
Put the line after all other lines in the sudoers file.


================================================================< DOCKERS >====================================================================

Docker:  [https://docker-curriculum.com/#terminology]
=======
$ sudo docker pull busybox(image-name)
$ sudo docker images 


docker build -t reponame:tagname .
docker run -d -p 8094:8094 --name inventory or 69d6afdc52f9

map logs:
docker run -d -p 8094:8094 -v /logs:/logs inventory
docker run -d --network host -v /logs:/logs warehouse

docker build -t zuul .
docker run -d -p 8766:8766 -v /opt/app/dockers-aus/logs:/logs/arch zuul


docker build -t login
docker run -d -v /opt/app/dockers-aus/logs:/logs login

docker build -t reports .
docker run -d -p 8059:8049 -v /opt/app/dockers-aus/logs:/logs/ reports


docker build -t nginx
docker run -d -p 6060:80 nginx

add to above command for memory
--memory=2000m
--cpus=0.25

docker inspect -f '{{ .Created }}' IMAGE_OR_CONTAINER

run:
---
$ sudo docker run busybox(image-name)
$ docker run busybox echo "hello from busybox"  [executes single command]
$ docker run -it busybox sh    [run more than just one command in a container][it=interactive tty]


eureka.instance.preferIpAddress
status:
------
$ sudo docker ps  [shows you all containers that are currently running]
$ docker ps -a    [shows list of all containers that we run]
du -sh  <foldername>
remove:
-------
$ docker rm containerId-1 containerId-2 ...
$ docker rm $(docker ps -a -q -f status=exited)
	-q ==returns the numeric IDs 
	-f ==filters output based on conditions provided.
note:--rm flag that can be passed to "docker run" which automatically deletes the container once it's exited.[ex:$ docker run --rm prakhar1989/static-site]
$ docker container prune [ WARNING! This will remove all stopped containers]
$ docker rmi imageId[delete images] -f

running a service in docker:
===========================
$ docker run --rm prakhar1989/static-site
note:{in this case, the client is not exposing any ports so we need to re-run the docker run command to publish ports}
$ docker run -d -P --name static-site prakhar1989/static-site
note:{
		-d will detach our terminal[detached mode]
		-P will publish all exposed ports to random ports
		--name corresponds to a name we want to give to container
		}
$ docker port container-name/id  [to know the published ports]
80/tcp -> 0.0.0.0:32769
443/tcp -> 0.0.0.0:32768

$ docker run -p 8888:80 image-name

stop:
----
$ docker stop containerId/name


docker information:
==================
docker system info
docker system df


sts:
====
auto import-------------> ctrl+shift +o
align-------------------> ctrl+shift +f
delete select lines-----> ctrl +d
to uppercase------------> ctrl+shift+x
to lowercase------------> ctrl+shift+y
renaming all fields-----> alt+shift+r

aws:
====
create ami 1a,1b,1c
select 1b---actions--image--create image
no reboot cheked
delete on termination-unchecked
qa-1b server in N.Virginia
ami-nv-qa-app-1b
m5.large

team users creation:
====================
1.user creation:             
 useradd gammadev
 useradd alphadev
 useradd betadev
 useradd deltadev

 
Note:
		userdel -r username   (or) userdel username
		cat /etc/os-release

		https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-transfer
		https://mpreisle.fedorapeople.org/ssg_new_guides/ssg-rhel7-guide-stig-rhel7-server-upstream.html#xccdf_org.ssgproject.content_group_permissions

password strength:
		vi /etc/security/pwquality.conf
		minlen = 9
		minclass = 4
password aging/expiration:
	chage -M 30 uesrname(gammadev,betadev,deltadev,alphadev)
	chage -M -1 uesrname-----disabling expiration


2.create directory in /opt/app/ and copy jars
 # mkdir gamma_team
 # cp ipd-0.0.1.jar gamma_team/
 # cp emr-0.0.1.jar gamma_team/
 # cp erx.jar gamma_team/
 # cp website-services-0.0.1.jar gamma_team/
 # cp gateway-0.0.1.jar gamma_team/
 # cp quality.jar gamma_team/
 
 # mkdir beta_team
 # cp appointment-new.jar beta_team/
 # cp opd-0.0.1.jar beta_team/
 # cp Appointment.jar beta_team/
 # cp internal-app-0.0.1.jar beta_team/

 
3.change directory permissions        NOte:[chown -R alphadev:alphadev foldername]
 # chown gammadev gamma_team
 # chgrp gammadev gamma_team
 # chmod 550 gamma_team
 
 # chown betadev beta_team
 # chgrp betadev beta_team
 # chmod 550 beta_team

4.change scripts permission
 # chmod 775 ipd
 # chmod 775 erx
 # chmod 775 emr
 # chmod 775 website-service
 # chmod 775 gateway
 # chmod 775 quality

 # chmod 775 appointment
 # chmod 775 appointment-new
 # chmod 775 opd
 # chmod 775 internal-app
 
 755
 
5.changed init script
PATH_TO_JAR=/opt/app/gamma_team/
PATH_TO_JAR=/opt/app/beta_team/	
PID_PATH_NAME=/opt/app/pidfiles/

gamma_team=ipd,erx,emr,website-service,gateway,quality
beta_team=appointment,appointment-new,opd,internal-app


references:
===========
websocket:

https://blog.teamtreehouse.com/an-introduction-to-websockets

python thread:
https://alyssaq.github.io/2014/how-do-I-return-a-http-response-to-caller-and-continue-processing/

https://wsvincent.com/django-user-authentication-tutorial-login-and-logout/

https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-centos-7
https://docs.docker.com/install/linux/docker-ce/centos/
security enhancement:
https://www.ostechnix.com/linux-troubleshooting-semanage-command-not-found-in-centos-7rhel-7/
https://www.liberiangeek.net/2014/11/change-openssh-port-centos-7/[good]
https://www.digitalocean.com/community/tutorials/how-to-set-up-multi-factor-authentication-for-ssh-on-centos-7
https://www.tecmint.com/disable-ssh-root-login-in-linux/
https://codefresh.io/docker-tutorial/build-docker-image-dockerfiles/

https://alvinalexander.com/git/git-show-change-username-email-address

https://www.studytonight.com/servlet/url-rewriting-for-session-management.php     [servlet session examples]
https://www.citusdata.com/blog/2016/07/14/choosing-nosql-hstore-json-jsonb/       [postgres as NoSQL]
postgresqltutorial.com/postgresql-hstore/										   [hstore tutorial]
https://medium.com/practo-engineering/blue-green-deployment-on-amazon-aws-38b820518411
https://www.drissamri.be/blog/technology/starting-modern-java-project-with-jhipster/
https://blog.couchbase.com/deployment-pipeline-docker-jenkins-java-couchbase/
xcenter autostart vm's:
https://support.citrix.com/article/CTX133910

guardduty:
https://github.com/aws-samples/amazon-guardduty-hands-on/blob/master/README.md
https://theithollow.com/2018/04/02/protect-your-aws-accounts-with-guardduty/

https://www.git-tower.com/learn/git/faq/change-author-name-email
$ git config --global user.name "John Doe"
$ git config --global user.email "john@doe.org"

installing lite-server for running ui-dist in localpc:[install globally]:
https://www.npmjs.com/package/lite-server
>npm install -g lite-server
>go to dist directory and run below command
lite-server

books download:
http://it-ebooks.directory/search.html?query=Core+Java%3A+An+Integrated+Approach%2C+New%3A+Includes+All+Versions+upto+Java+8&in=title&page=1
https://drissamri.be/blog/java/enable-https-in-spring-boot/
https://www.programiz.com/python-programming/function-argument
https://www.vultr.com/docs/how-to-install-alfresco-community-edition-on-centos-7
Updated query with top 10 usage limit per doctor:
-------------------------------------------------
select * from (
select list.drug_id, list.created_usr_id, list.usedRank,list.no_of_usages , ROW_NUMBER() OVER ( PARTITION BY list.created_usr_id ) AS rownum
from 
(

select drug_id , created_usr_id, count(drug_id) as no_of_usages, 
DENSE_RANK () OVER (
PARTITION BY created_usr_id
ORDER by 
count(drug_id)
) as usedRank

FROM
OPD.PATIENT_PRESCRIPTION_DRUGS_TRANS --where created_usr_id = 220180111000005
group by created_usr_id, drug_id order by created_usr_id, usedRank desc 
) as list
) as query
where query.rownum <= 10	


select created_usr_id, created_dttm, row_number() over (partition by created_usr_id order by created_dttm) as rn from opd.patient_prescription_drugs_trans 

select ppdt.created_usr_id, ppdt.created_dttm, ppdt.rn from(select created_usr_id, created_dttm, row_number() over (partition by created_usr_id order by created_dttm) as rn from opd.patient_prescription_drugs_trans where created_usr_id) as ppdt where ppdt.rn=1;

1 month users:
select ppdt.created_usr_id, ppdt.created_dttm, ppdt.rn from(select created_usr_id, created_dttm, row_number() over (partition by created_usr_id order by created_dttm) as rn from opd.patient_prescription_drugs_trans)  as ppdt where ppdt.rn=1 and ppdt.created_dttm >= CURRENT_DATE -INTERVAL '1MONTH';

>1 <6 months
select ppdt.created_usr_id, ppdt.created_dttm, ppdt.rn from(select created_usr_id, created_dttm, row_number() over (partition by created_usr_id order by created_dttm) as rn from opd.patient_prescription_drugs_trans)  as ppdt where ppdt.rn=1 and ppdt.created_dttm between CURRENT_DATE -INTERVAL '6 MONTHS' and CURRENT_DATE -INTERVAL '1MONTH'

>6 and <12

==========================================================================================================
starting xe,rocketchat,openproject

XE:

cd /opt/x2engine-6.9-8
./ctlscript.sh start

Open Proj:
----------
docker container openproject start
Firsttime:
---------
docker run -d -p 7889:80 --name openproject -e SECRET_KEY_BASE=secret -v /var/lib/openproject/pgdata:/var/lib/postgresql/9.6/main -v /var/lib/openproject/logs:/var/log/supervisor -v /var/lib/openproject/static:/var/db/openproject openproject/community:8

Second time:
-----------
docker start openproject
docker exec -it <container name> /bin/bash
cd /var/run/apache2  [remove pid file in this location]
docker stop openproject
docker start openproject

sudo firewall-cmd --zone=public --permanent --add-port=7889/tcp


netConnectivity:
----------------
Remember from open project if mails cant be send, there seems a internet issue in the server. To restore internet connectivity, do the below things.
$ source /root/.bash_profile
$caa -d
Do these things as root user. Check if internet connectivity works.

Rocket chat:
------------
/etc/init.d/rocketchat_all start


community.openproject.com/projects/docker/work_packages/24378/activity

Use the command docker exec -it <container name> /bin/bash to get a bash shell in the container
Generically, use docker exec -it <container name> <command> to execute whatever command you specify in the container.



unmount a device:https://www.webhostinghero.com/blog/how-to-unmount-filesystems-or-partitions-in-centos-linux/
================
1.The first step is to find out which disks and volumes are mapped to which directories.
  #lsblk
2.in order to unmount a device, you must be “standing outside” its block device descriptor or mount point
  umount /var/lib/docker
3.lsblk  


mounting hard disk:
===================
1.mkfs.xfs /dev/xvdb
2.mount -t xfs /dev/xvdb /var/lib/dockers
3.open /etc/fstab
  add the entry ---------- /dev/xvdb /var/lib/docker xfs defaults 0 0

cyberciti.biz/faq/centos-linux-6-7-changing-timezone-command-line/  
  

===============================================================================================================

Python - flask commands
-------------------------
python -m pip install --upgrade pip

pip install flask flask_restful flask_jsonpify

install activemq:[http://activemq.apache.org/version-5-getting-started.html]
==============================================================================================================================
>Download the activemq gzip file to the Unix machine, using either a browser or a tool, i.e., wget, scp, ftp, etc. for example:
  wget http://archive.apache.org/dist/activemq/5.15.3/apache-activemq-5.15.3-bin.tar.gz
>Extract the files from the gzip file into a directory of your choice. For example:
         tar zxvf activemq-x.x.x.tar.gz -C /target/directory
	i.e: tar zxvf apache-activemq-5.15.3-bin.tar.gz -C /var/activemq/
	     mv /var/apache-activemq-*/ /var/activemq/
>If the ActiveMQ start-up script is not executable, change its permissions. The ActiveMQ script is located in the bin directory. For example:
     cd [activemq_install_dir]/bin
     chmod 755 activemq	
>now create activemq.service file[Using Systemd service will ensure that ActiveMQ will start automatically at boot time and failures]
  vi  /etc/systemd/system/activemq.service 
  
  
>Now populate the activemq.service file with the following content.
-------------------------------------------
[Unit]
Description=ActiveMQ service
After=network.target

[Service]
Type=forking
ExecStart=/var/activemq/bin/activemq start
ExecStop=/var/activemq/bin/activemq stop
User=root
Group=root
Restart=always
RestartSec=9
StandardOutput=syslog
StandardError=syslog
SyslogIdentifier=activemq

[Install]
WantedBy=multi-user.target
----------------------------------------------
>systemctl start activemq
> To configure ActiveMQ to automatically start at boot time, use.
  systemctl enable activemq
>systemctl status activemq 

>Using Admin Web Panel of activemq
  http://Your_Server_IP:8161/admin
>If you have firewalld installed, you will have to allow port 8161 through the firewall. Run the following command for same.

   firewall-cmd --zone=public --permanent --add-port=8161/tcp
   firewall-cmd --reload

   The initial username and password for Apache ActiveMQ are admin and admin. Once you are logged in, you will see the following interface.  

=====================================================end activemq install====================================================== 

https://docs.alfresco.com/community5.1/tasks/simpleinstall-community-lin.html

https://www.howtoforge.com/tutorial/how-to-install-apache-activemq-on-centos-7/

http://docs.alfresco.com/5.2/concepts/prereq-opt-install.html

nginx
https://www.cyberciti.biz/faq/how-to-install-and-use-nginx-on-centos-7-rhel-7/

python:
------
https://code.tutsplus.com/tutorials/file-and-directory-operations-using-python--cms-25817
https://automatetheboringstuff.com/chapter9/



http://49.207.6.227:8761/eureka/apps/EMR-SERVICE-VEER/dru.test01:emr-service-veer:8058/status?value=DOWN {unregester from eureka manually}

cloudwatch to elk
===================
1.only metrics ---Cloudwatch input plugin   
https://www.elastic.co/guide/en/logstash/current/plugins-inputs-cloudwatch.html#plugins-inputs-cloudwatch-common-options

2.community-provided plugin --lukewaite/logstash-input-cloudwatch-logs [logstash-input-cloudwatch_logs]
https://www.rubydoc.info/gems/logstash-input-cloudwatch_logs/0.9.2
https://github.com/lukewaite/logstash-input-cloudwatch-logs
https://lukewaite.ca/aws/lambda/elk/logstash/2015/07/13/aws-lambda-and-elk.html

bin/logstash-plugin install logstash-input-cloudwatch
Install the plugin from rubygems: bin/logstash-plugin install logstash-input-cloudwatch_logs




Please add the below bold lines in bootstrap to make new arch jars as container suitable. comment existing preferIpaddress key.
===============================================================================================================================

eureka:
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: http://${EUREKA_IP:localhost}:8761/eureka/
  instance:
    health-check-url-path: /health
    leaseRenewalIntervalInSeconds: 10
    leaseExpirationDurationInSeconds: 30
    #preferIpAddress: true
    hostname: ${IP:localhost}
    ip-address: ${IP:localhost}
    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${spring.application.instance_id:${server.port}}


postgres queries:
=================
creating table with hstore column: create table hst(drugs hstore);
creating table from existing table/view: CREATE TABLE new_table_name AS SELECT * FROM existing_view_name;
creating new hstore column in existing table: ALTER TABLE existing_table_name ADD COLUMN new_column_name hstore;
inserting data to hstore column from same table other columns:
	update table_name set hstore_column_name = hstore(array['drugnm','drugid'], array[drugnm,drugid::text]);
	(or)
	update table_name set hstor_column_name = hstore('d', drugnm)||hstore('drugid',drugid::text)
	NOTE:the column should either text or varchar.if not then cast it to text i.e drugid::text (here drugid is integer)

inserting data to hstore cloumn from already available table: insert into tablename(hstore_column_name) SELECT hstore(t) FROM already_available_table_name AS t;
 	

select from jsonb column:
------------------------
select * from jsb;(table with hstore column)
select * from drugs;(relational table)
select * from drugs  where drugnm ilike '%' AND drugnm NOT LIKE '%+%';(relational table)
select * from jsb  where drugs->>'drugnm' ilike '%@@t%' AND drugs->>'drugnm' NOT LIKE '%+%';


view creation from dev db:
-------------------------
-- View: public.drugs_info

-- DROP MATERIALIZED VIEW public.drugs_info;

CREATE MATERIALIZED VIEW public.drugs_info
TABLESPACE pg_default
AS
 SELECT (a.drug_brand_nm::text || '@@'::text) || b.drug_nm::text AS comb_drugnm,
    (a.drug_brand_id || '-'::text) || a.drug_id AS comb_drugid,
    a.drug_brand_nm AS brand_name
   FROM drug_brand_ref a
     JOIN drug_ref b ON a.drug_id = b.drug_id
  WHERE a.isactive = true
WITH DATA;

ALTER TABLE public.drugs_info
    OWNER TO drucare_appuser;

GRANT INSERT, SELECT, UPDATE, DELETE, TRUNCATE ON TABLE public.drugs_info TO quality_writer;
GRANT ALL ON TABLE public.drugs_info TO drucare_appuser;
GRANT SELECT ON TABLE public.drugs_info TO quality_reader;

CREATE INDEX i_drugs_info_brand_name
    ON public.drugs_info USING btree
    (brand_name COLLATE pg_catalog."default")
    TABLESPACE pg_default;

  
table creation with hstore column and inserting,selecting data from hstore column:
---------------------------------------------------------------------------------
1.CREATE drugs_info AS SELECT (a.drug_brand_nm::text || '@@'::text) || b.drug_nm::text AS comb_drugnm,
    (a.drug_brand_id || '-'::text) || a.drug_id AS comb_drugid,
    a.drug_brand_nm AS brand_name
   FROM drug_brand_ref a
     JOIN drug_ref b ON a.drug_id = b.drug_id
  WHERE a.isactive = true

  
2.ALTER TABLE public.drugs_info ADD COLUMN drugs_hstore hstore;

3.update public.drugs_info set drugs_hstore = hstore(array['comb_drugnm','comb_drugid'], array[comb_drugnm,comb_drugid]);  

4.selecting from hstore column:
	SELECT drugs_hstore->'comb_drugnm' AS sup FROM public.drugs_info WHERE lower(drugs_hstore->'comb_drugnm') LIKE '%@@Pa%';
	(or)
	SELECT drugs_hstore->'comb_drugnm' AS sup FROM public.drugs_info WHERE drugs_hstore->'comb_drugnm' ILIKE '%@@Pa%' AND drugs_hstore->'comb_drugnm' NOT ILIKE '%+%'


joins:	
SELECT EMP_ID, NAME, DEPT FROM COMPANY CROSS JOIN DEPARTMENT;
SELECT table1.column1, table2.column2... FROM table1 INNER JOIN table2 ON table1.common_filed = table2.common_field;
SELECT ... FROM table1 LEFT OUTER JOIN table2 ON conditional_expression ...
SELECT ... FROM table1 RIGHT OUTER JOIN table2 ON conditional_expression ...
SELECT ... FROM table1 FULL OUTER JOIN table2 ON conditional_expression ...


postgres references:
https://www.compose.com/articles/faster-operations-with-the-jsonb-data-type-in-postgresql/

elastic search queries:
=======================
for most freuently used drugs:[table name=OPD.PATIENT_PRESCRIPTION_DRUGS_TRANS]

1.creating index for above table

PUT /doctor_prescription_trans
{
  "mappings": {
    "transaction_type": {
      "properties": {
        "drug_brand_id": {
          "type": "integer"
        },
        "drug_id": {
          "type": "integer"
        },
        "created_usr_id": {
          "type": "long",
        }
      }
    }
  }
}

2.query to get mostly used drugs based on drug_id

GET doctor_prescription_trans/_search
{
    "size" : 300,
    "query" : {
        "term" : { "created_usr_id" : 220171221000002 }
    },
    
    "aggs" : {
        "genres" : {
            "terms" : { "field" : "drug_id" }
        }
    }
}

or
note:it only gives
GET doctor_prescription_trans/_search?filter_path=aggregations.genres.buckets
{
    "size" :0,
    "query" : {
        "term" : { "created_usr_id" : 220171221000002 }
    },
    
    "aggs" : {
        "genres" : {
            "terms" : { "field" : "drug_id" }
        }
    }
}

3.query to get drugs information matching list of drugid's:



S-hared:
=========
https://docs.spring.io/autorepo/docs/spring-framework/5.0.0.M1/spring-framework-reference/pdf/spring-framework-reference.pdf

anydesk:
==========
NAKKA VEERANJANEYULUs
837 118 649


increasing ram in vm's:
=======================
1.open Xen-server
2.click on vm (ex:elk.dru.care)
3.click on memory tab in right side console
4.click on edit options
5.enter total required ram size (ex:6)

Git:[WD-->SA-->LR-->RR]
===
git config --list
git config --global user.name="veer"
git config user.name="veer"

git init
git remote add origin repo-url

git add <filename>                 [add file to staging area]    
git reset HEAD <filename>		   [removing file from staging area]
git checkout -- <file>             [to discard changes in working directory]

git remote -v                      [You can verify if a local repository is tracking the remote repository using ]



SELECT org_id, org_type_id, org_nm, contact_nm, contact_no, email_id, fax_no, tan_no, hos_bed_type_id, country_nm, state_nm, district_nm, mandal_nm, village_nm, locality_nm, address_line1, longitude, latitude, dm_hm_no, vat_no, service_tax_no, mci_no, rohini_no, register_no, registration_verfied, isactive, created_usr_id, created_dttm, org_short_nm, contact_no1, contact_no2, website_address, profile_nm, emergency_contact_no, address_line2, pincode, org_grp_id, is_head_office, city_nm, is_fullday, zoho_ref_id, gst_number, is_lab_accredited, accreditation_body, accreditation_body_url, accreditation_ref_no, accreditation_standard, confidence_level_percntg, is_account_activated, no_of_beds, tele_health_id, pharmacy_branch_type, ip_address, storage_total_size, storage_used_qty, archive_usage, processing_space, archive_total_size
	FROM public.organisation_ref where org_nm ilike 'Health%'
	
	
shared-s:
=========
git:
----
git checkout seotweaks
git merge -s ours master
git checkout master
git merge seotweaks
https://www.ntu.edu.sg/home/ehchua/programming/howto/Tomcat_HowTo.html
https://www.amitph.com/spring-data-jpa-query-methods/
https://www.git-tower.com/learn/git/faq/track-remote-upstream-branch
https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html

https://docs.spring.io/autorepo/docs/spring-framework/5.0.0.M1/spring-framework-reference/pdf/spring-framework-reference.pdf
https://javaconceptoftheday.com/java-interview-programs-with-solutions/
https://stackoverflow.com/questions/35324974/query-eureka-without-registering-as-a-service
https://www.vogella.com/tutorials/JUnit/article.html
https://www.tutorialspoint.com/junit/
https://docs.spring.io/autorepo/docs/spring-framework/5.0.0.M1/spring-framework-reference/pdf/spring-framework-reference.pdf
http://it-ebooks.directory/search.html?query=Core+Java%3A+An+Integrated+Approach%2C+New%3A+Includes+All+Versions+upto+Java+8&in=title&page=1
https://softwareengineering.stackexchange.com/questions/14335/biggest-mistake-youve-ever-made
https://download.cnet.com/Citrix-XenServer/3000-2651_4-75183818.html


http://docs.alfresco.com/community/concepts/alfresco-tutorial-02.html

http://www.postgresqltutorial.com/postgresql-joins/

shared-v:
https://realpython.com/
https://codybonney.com/allow-cross-origin-resource-sharing-cors-using-flask/
https://flask-cors.readthedocs.io/en/latest/
https://www.thegeekstuff.com/2009/03/15-practical-unix-grep-command-examples/
https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes
http://api.textlocal.in/docs/sendsms
https://www.tecmint.com/35-practical-examples-of-linux-find-command/
https://dzone.com/articles/temp-store-and-memory-percent



Activemq memory management dzone.com/articles/temp-store-and-memory-percent
---https://dzone.com/articles/temp-store-and-memory-percent

https://www.tecmint.com/synchronize-time-with-ntp-in-linux/ ----time synchronization in centos

python -m pip install -U --force-reinstall pip


RUN apk add tzdata
RUN cp /usr/share/zoneinfo/Asia/Kolkata /etc/localtime
RUN echo "Asia/Kolkata" > /etc/timezone



pharmacy task for comparing tests and panels:
---------------------------------------------

https://towardsdatascience.com/natural-language-processing-for-fuzzy-string-matching-with-python-6632b7824c49

https://pandas.pydata.org/pandas-docs/stable/getting_started/comparison/comparison_with_sql.html


 


verdacio:
--------
verdaccio.org
npm install -g verdaccio
npm install -g forever
verdaccio.org/docs/en/server-configuration
/home/drucaredev/node_modules/tslib/verdaccio/config.yaml
forever start `which verdaccio`

/bin/verdaccio
vi /home/drucaredev/verdaccio/config.yaml
/root/.config/verdaccio/config.yaml
http://192.168.1.101:4873/#/

verdaccio
first run normally check port and ip
localhost:4873 this is wrong
it should be this 0.0.0.0:4873
verdaccio.org
Verdaccio · A lightweight private npm proxy registry
A lightweight private npm proxy registry
verdaccio.org
Server Configuration · Verdaccio
<p>This is mostly basic linux server configuration stuff but I felt it important to document and share the steps I took to get verdaccio running permanently on my server. You will need root (or sudo) permissions for the following.</p>

start:
/usr/bin/forever start /usr/lib/node_modules/verdaccio/bin/verdaccio

storage:
/root/.config/verdaccio/storage/counselling


nginx conf for new location:
===========================
1.create a folder for dist deployment.
2.add location to nginx.conf

MFA:(uiteam)
===
1.google-authenticator
Do you want authentication tokens to be time-based (y/n) y
Your new secret key is: 3XVVFAI6D2F2YQYQ3C62M7NGPI
Your verification code is 339827
Your emergency scratch codes are:
  30991605
  21485402
  17942678
  82203337
  26870857

Do you want me to update your "/home/uiteam/.google_authenticator" file? (y/n) y

Do you want to disallow multiple uses of the same authentication
token? This restricts you to one login about every 30s, but it increases
your chances to notice or even prevent man-in-the-middle attacks (y/n) n

By default, a new token is generated every 30 seconds by the mobile app.
In order to compensate for possible time-skew between the client and the server,
we allow an extra token before and after the current time. This allows for a
time skew of up to 30 seconds between authentication server and client. If you
experience problems with poor time synchronization, you can increase the window
from its default size of 3 permitted codes (one previous code, the current
code, the next code) to 17 permitted codes (the 8 previous codes, the current
code, and the 8 next codes). This will permit for a time skew of up to 4 minutes
between client and server.
Do you want to do so? (y/n) n


If the computer that you are logging into isn't hardened against brute-force
login attempts, you can enable rate-limiting for the authentication module.
By default, this limits attackers to no more than 3 login attempts every 30s.
Do you want to enable rate-limiting? (y/n) y


DataFrames:
rows=labels=indexes
columns
axes=rows+columns


SELECT ltr.long_common_nm, ltr.loinc_system, ltr.investigation_department, ltr.time_aspect, ltr.is_panel, ltr.order_obs, ltr.test_rank , 'mapped' as type FROM lab.lab_org_test_xref lotx inner join lab.lab_test_ref  ltr on lotx.test_id=ltr.test_id union all (SELECT ltr.long_common_nm, ltr.loinc_system, ltr.investigation_department, ltr.time_aspect, ltr.is_panel, ltr.order_obs, ltr.test_rank,'unmapped' as type FROM lab.lab_org_test_xref lotx right join lab.lab_test_ref  ltr on lotx.test_id=ltr.test_id where lotx.test_id is null and ltr.isactive is true and ltr.long_common_nm='GLOBULIN' order by test_rank)

running python application in dev using gunicorn:
=================================================
https://www.rosehosting.com/blog/how-to-install-python-3-6-4-on-centos-7/
1.	sudo yum install -y https://centos7.iuscommunity.org/ius-release.rpm
	sudo yum update
	sudo yum install -y python36u python36u-libs python36u-devel python36u-pip


1. make below changes in app.run()
    i.e   app.run(host="0.0.0.0", port="8057", debug=True)


2.gunicorn -w 2 -b $IP:$PORT flaskfilename:app --daemon
    i.e   dev  :gunicorn -w 2 -b  192.168.1.101:8057 catalog:app --daemon
		  qa   :gunicorn --certfile=/opt/app/qa_new_cert/cert.pem --keyfile=/opt/app/qa_new_cert/key.pem  -w 2 -b  192.168.1.106:8057 catalog:app --daemon
		  erx-dev  :gunicorn -w 2 -b  192.168.1.101:8062 erxsuggestions:app --preload --daemon {don't use}
					gunicorn -w 2 -b  192.168.1.101:8064 erxsuggestions:app --daemon
					gunicorn -w 2 -b  192.168.1.101:8065 inventory_excel_upload:app --daemon
					gunicorn -b  192.168.1.101:5000 myop_with_no_back_flow:app --daemon

	
3.pyhton3.6 library in dev
  "/usr/lib/python3.6/site-packages/"
  labupload:
  pip3.6 install gunicorn
  pip3.6 install psycopg2-binary
  pip3.6 install pandas
  pip3.6 install flask
  pip3.6 install flask_cors
  pip3.6 install fuzzywuzzy
  pip3.6 install python-Levenshtein  [if not get installed then use "yum install gcc"]
  erx-suggestions:
  pandas,psycopg2-binary,flask_cors,apscheduler
   

1.pip install [package name]
2.pip install requests==2.0.0


production pyhton setup:
========================
1.virtualenv erx_suggestions_venv
2.activate virtualenv:
source erx_suggestions_venv/bin/activate
deactivate
3.without activating virtualenv:
erx_suggestions_venv/bin/python python_script.py


containerizing python app:
==========================
ERX:
====
1.Dockerfile:
------------
FROM python:3.7-alpine

VOLUME /logs
COPY . /app
WORKDIR /app
RUN pip install --upgrade pip
RUN apk add --no-cache python3-dev postgresql-libs libstdc++ && \
    apk add --no-cache --virtual .build-deps g++ postgresql-dev && \
    ln -s /usr/include/locale.h /usr/include/xlocale.h && \
    pip3 install -r requirements.txt && \
    apk --purge del .build-deps


EXPOSE 8064

ENTRYPOINT ["sh", "-c","/app/start.sh" ]




2.requirements.txt:
-------------------
flask
gunicorn
psycopg2-binary
flask-cors
pandas
apscheduler

3.start.sh:
-----------
#!/bin/sh
export IP=`/sbin/ifconfig eth0 | grep inet | awk '{print $2}'| cut -f2 -d:`
exec gunicorn -w 2 -b $IP:8064 erxsuggestions:app

4.docker build -t erx .
5.docker run -d -p 8064:8064 -v /logs:/logs/ erx





My Operator:
-----------
1.Dockerfile:
------------
FROM python:3.7-alpine

VOLUME /logs
COPY . /app
WORKDIR /app
RUN pip install --upgrade pip
RUN apk add --no-cache python3-dev postgresql-libs libstdc++ && \
    apk add --no-cache --virtual .build-deps g++ postgresql-dev && \
    ln -s /usr/include/locale.h /usr/include/xlocale.h && \
    pip3 install -r requirements.txt && \
    apk --purge del .build-deps


EXPOSE 8064

ENTRYPOINT ["sh", "-c","/app/start.sh" ]


2.requirements.txt:
-------------------
flask
gunicorn
psycopg2-binary
flask-cors


3.start.sh:
-----------
#!/bin/sh
export IP=`/sbin/ifconfig eth0 | grep inet | awk '{print $2}'| cut -f2 -d:`
export DB_IP=$DB_IP
export DB_PORT=$DB_PORT

exec gunicorn -w 2 -b $IP:5000 myop_with_no_back_flow:app



4.docker build -t myoperator .
5.docker run -d -p 5000:5000 -v /logs:/logs/ myoperator






move images:
------------
docker save -o ./erx.tar erx:latest
scp -P 39485 erx.tar drucareqa@192.168.1.106:/home/drucareqa/erx-suggestions
docker load -i ./erx.tar


qa db:
username:drucare_appuser
Password:care$app@2233
export DB_IP=13.234.40.201
export DB_PORT=3388


setup timezone:
#timedatectl list-timezones(for fetching the list of timezones available)
#timedatectl set-timezone <time-zone name>
#date(to check the date and time changes affected or not)






myoperator queries:
SELECT od.dept_id,dept.dept_nm
FROM public.organisation_department_xref od join 
department_ref dept on od.dept_id=dept.dept_id where org_id=1170 order by dept_nm;
 

SELECT oe.emp_id, REPLACE(CONCAT(INITCAP(eir.FIRST_NM),' ',INITCAP(eir.MIDDLE_NM),' ',INITCAP(eir.LAST_NM)),' ',' ') as emp_user_nm
FROM organisation_employee_xref oe join employees_info_ref eir on eir.emp_id=oe.emp_id
join employee_dept_xref ed on ed.emp_id= eir.emp_id where oe.org_id=1170 and dept_id=46 and doctor_register_no is not null order by emp_user_nm;
 

SELECT DOCTOR_ID, DOCTOR_REGISTER_NO, START_DAY, END_DAY, START_TM, END_TM, ORG_ID, ORG_GRP_ID, ISACTIVE, 
CREATED_USR_ID, WORKING_DAY ,START_DT,END_DT FROM APPOINTMENT.DOCTOR_WORK_INFO_TRANS 
WHERE ISACTIVE=TRUE AND DOCTOR_ID=220180127000002 AND ORG_ID=2345

SELECT ROW_NUMBER () OVER (ORDER BY EMP_USER_NM) AS SNO,OE.EMP_ID, REPLACE(CONCAT(INITCAP(EIR.FIRST_NM),' ',INITCAP(EIR.MIDDLE_NM),' ',INITCAP(EIR.LAST_NM)),' ',' ') AS EMP_USER_NM FROM ORGANISATION_EMPLOYEE_XREF OE JOIN EMPLOYEES_INFO_REF EIR ON EIR.EMP_ID=OE.EMP_ID JOIN EMPLOYEE_DEPT_XREF ED ON ED.EMP_ID= EIR.EMP_ID WHERE OE.ORG_ID=%(org_id)s AND DEPT_ID=%(dept_id)s AND DOCTOR_REGISTER_NO IS NOT NULL

SELECT ROW_NUMBER () OVER (ORDER BY EMP_USER_NM) AS SNO, DOCTOR_ID, DOCTOR_REGISTER_NO, WORKING_DAY ,START_DT,END_DT FROM APPOINTMENT.DOCTOR_WORK_INFO_TRANS 
WHERE ISACTIVE=TRUE AND DOCTOR_ID=%(doct_id)s AND ORG_ID=%(org_id)s


INSERT INTO APPOINTMENT.PATIENT_APPOINTMENT_TRANS(APPOINTMENT_DT, ORG_ID, DEPT_ID, DOCTOR_ID, APPOINTMENT_TYPE) VALUES
('2019-09-02 08:30', 1333, 220190316000002,'ivrs');









deleting a service:[DELETE method]
http://192.168.1.101:8761/eureka/apps/emr-optho-siri2/dru.test01:emr-optho-siri2:8042
http://49.207.6.227:8888/dev/ipd-application-dev.properties

downing a service:[PUT method]
http://49.207.6.227:8761/eureka/apps/EMR-SERVICE-VEER/dru.test01:emr-service-veer:8058/status?value=DOWN
http://192.168.1.101:8761/eureka/apps/patient-portal-service-s/dru.test01:patient-portal-service-s:8053/status?value=DOWN











REF:
---
sql:
===
https://www.w3resource.com/PostgreSQL/postgresql-count-function.php
https://www.mongodb.com/blog/post/mongodb-and-data-streaming-implementing-a-mongodb-kafka-consumer
https://www.journaldev.com/18341/python-scikit-learn-tutorial