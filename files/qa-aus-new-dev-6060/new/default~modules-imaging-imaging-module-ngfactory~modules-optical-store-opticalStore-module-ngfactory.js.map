{"version":3,"sources":["webpack:///./src/app/modules/imaging/services/imaging.service.ts","webpack:///./src/app/modules/imaging/services/roles-constants.service.ts","webpack:///./src/app/modules/imaging/services/valid-user-guard.service.ts","webpack:///./src/app/shared/directives/disable-control.directive.ts"],"names":[],"mappings":"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","file":"default~modules-imaging-imaging-module-ngfactory~modules-optical-store-opticalStore-module-ngfactory.js","sourcesContent":["import { Injectable, Inject } from '@angular/core';\r\nimport { UtilService } from '@core/services/utils.service';\r\nimport * as S3 from 'aws-sdk/clients/s3';\r\nimport { APP_CONSTANTS } from '@app/app.constant';\r\nimport { AppConstant } from '@core/models/app-constant';\r\nimport { SPARKMD5, JSZIP } from '@core/services';\r\nimport { ENGINE_METHOD_DIGESTS } from 'constants';\r\n\r\n@Injectable()\r\nexport class ImagingService {\r\n  CHUNK_SIZES = 2097152; // incremental hash chunk size\r\n\r\n  constructor(\r\n    @Inject(APP_CONSTANTS) private appConstants: AppConstant,\r\n    @Inject(SPARKMD5) private SparkMD5,\r\n    @Inject(JSZIP) private JSZip,\r\n    private utilService: UtilService\r\n  ) {}\r\n\r\n  chartObjectFactory(seriesName: string) {\r\n    return {\r\n      chart: {\r\n        plotBackgroundColor: null,\r\n        plotBorderWidth: null,\r\n        plotShadow: false,\r\n        type: 'pie',\r\n        spacing: [0, 0, 0, 0],\r\n        margin: [0, 0, 0, 0]\r\n      },\r\n      boost: {\r\n        allowForce: true,\r\n        useGPUTranslations: true\r\n      },\r\n      credits: {\r\n        enabled: false\r\n      },\r\n      title: {\r\n        text: null\r\n      },\r\n      plotOptions: {\r\n        pie: {\r\n          allowPointSelect: true,\r\n          cursor: 'pointer',\r\n          colors: [\r\n            '#FF9655',\r\n            '#6AF9C4',\r\n            '#058DC7',\r\n            '#50B432',\r\n            '#ED561B',\r\n            '#DDDF00',\r\n            '#24CBE5',\r\n            '#64E572',\r\n            '#FFF263'\r\n          ],\r\n          dataLabels: {\r\n            enabled: true,\r\n            format: '<b>{point.name}:</b> {point.percentage:.1f} %',\r\n            style: {\r\n              textOutline: 0,\r\n              color: '#777',\r\n              fontSize: '10px'\r\n            },\r\n            distance: 10\r\n          }\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: seriesName,\r\n          data: [\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This method creates configuration for s3 constructor\r\n   * @returns {S3.Types.ClientConfiguration} S3 configuration object\r\n   */\r\n  createS3Configuration(): S3.Types.ClientConfiguration {\r\n    return {\r\n      accessKeyId: this.appConstants.buckets.imaging.accessKeyId,\r\n      secretAccessKey: this.appConstants.buckets.imaging.secretAccessKey,\r\n      region: this.appConstants.buckets.imaging.region,\r\n      maxRetries: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Chunk size for performing delete operation\r\n   */\r\n  get deleteObjectChunkSize() {\r\n    return this.appConstants.AWS_DELETE_OBJECT_CHUNK_SIZE;\r\n  }\r\n\r\n  /**\r\n   * This methods delete files from the s3 bucket\r\n   * @param {S3.ClientConfiguration} configs\r\n   * @param {String} bucketname\r\n   * @param {Array<string>} fileNames\r\n   */\r\n  deleteFromBucket(\r\n    configs: S3.ClientConfiguration,\r\n    bucketname: string,\r\n    fileNames: Array<{ name: string; isDicom: boolean }>\r\n  ) {\r\n    const bucket = new S3(configs);\r\n    const params: S3.Types.DeleteObjectsRequest = {\r\n      Bucket: bucketname,\r\n      Delete: {\r\n        Objects: fileNames.map(filename => ({\r\n          Key: filename.name\r\n        }))\r\n      }\r\n    };\r\n    const request = bucket.deleteObjects(params);\r\n    return request.promise();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Extracts zip file contents\r\n   * @async\r\n   * @param zipFile\r\n   * @returns {Promise<Array<Blob, String>>} A promise that returns extracted files when resolved\r\n   */\r\n  getZipContents(zipFile) {\r\n    return this.utilService\r\n      .readFileAsArrayBuffer(zipFile)\r\n      .then(zipFileArrayBuffer => {\r\n        const zip = new this.JSZip();\r\n        return zip.loadAsync(zipFileArrayBuffer);\r\n      })\r\n      .then(zipData => {\r\n        return this.fileContentExtractor(zipData);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @async\r\n   * Get the hash of a file\r\n   * @param {File} file MD5 has will be calculated of this file\r\n   * @returns {Promise<string>} A Promise that returns hash of a file when resolved\r\n   * ```js\r\n   * getIncrementalHash(fileObject)\r\n   *  .then((hash) => {\r\n   *    // consume hash\r\n   *  })\r\n   *  .catch((error) => {\r\n   *   // error occurred\r\n   *  })\r\n   * ```\r\n   */\r\n  getIncrementalHash(file) {\r\n    let currentChunk = 0;\r\n\r\n    const blobSlice = File.prototype.slice;\r\n    const chunkSize = this.CHUNK_SIZES;\r\n    const chunks = Math.ceil(file.size / chunkSize);\r\n    const spark = new this.SparkMD5.ArrayBuffer();\r\n    const fileReader = new FileReader();\r\n\r\n    const loadNext = () => {\r\n      const start = currentChunk * chunkSize;\r\n      const end =\r\n        start + chunkSize >= file.size ? file.size : start + chunkSize;\r\n      fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\r\n    };\r\n\r\n    loadNext();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      fileReader.onload = (e: any) => {\r\n        spark.append(e.target.result);\r\n        currentChunk++;\r\n        if (currentChunk < chunks) {\r\n          loadNext();\r\n        } else {\r\n          resolve(spark.end());\r\n        }\r\n      };\r\n      fileReader.onerror = err => {\r\n        reject(err);\r\n      };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the has of an array buffer\r\n   * @param {ArrayBuffer} array Buffer of which MD5 to calculated\r\n   */\r\n  getHashArrayBuffer(arrayBuffer) {\r\n    const spark = new this.SparkMD5.ArrayBuffer();\r\n    spark.append(arrayBuffer);\r\n    return spark.end();\r\n  }\r\n\r\n  /**\r\n   * A user can have multiple designations so this method finds the highest designation a user can have\r\n   * by matching against the predefined authorized designation\r\n   * @param {Map<string, number>} roleMap A map containing user designation and their priority level\r\n   * @param {Array<string>} userDesignations Aesignations an user have\r\n   * this function fails when userDesignations is empty\r\n   * @returns {string} Highest designation a user can have\r\n   * ```js\r\n   * // userHighestRole contains user's highest role\r\n   * const userDesignations = ['Doctor', 'Admin'];\r\n   * const roleMap = new Map([['Admin', 1], ['Technician', 2], ['Doctor', 3]]);\r\n   * // userHighestRole will contain Admin\r\n   * const userHighestRole = getUserHighestRole(\r\n       this.roleMap,\r\n       this.userDesignations\r\n    )\r\n   * ```\r\n   */\r\n  getUserHighestRole(\r\n    roleMap: Map<string, number>,\r\n    userDesignations: Array<string>\r\n  ): string {\r\n    // it goes by filtering the user designations\r\n    // if user's designation is in authoized designations it is included\r\n    const filteredDesignation = userDesignations.filter(designation =>\r\n      roleMap.has(designation)\r\n    );\r\n    if (filteredDesignation.length) {\r\n      return (\r\n        filteredDesignation\r\n          // then it converts userDesignations of the form Array<string>\r\n          // to Array<{ designation: string, priority: number}>\r\n          // if priority has lower value if has more priority\r\n          .map(designation => ({\r\n            designation,\r\n            priority: roleMap.get(designation)\r\n          }))\r\n          // then it finds the designation with priority with lowest value\r\n          .reduce((previous, currValue) => {\r\n            if (previous.priority < currValue.priority) {\r\n              return previous;\r\n            } else {\r\n              return currValue;\r\n            }\r\n          }).designation\r\n      );\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method checks whether a given file is zip file by verifying its signature\r\n   * @param {File} zip A zip file to validate\r\n   * @returns {Promise<boolean>} Promise which returns a boolean value when resolved\r\n   * ```js\r\n   * isValidZipFile(aFileObject)\r\n   *  .then((value) => {\r\n   *    // is a valid zip file\r\n   *  })\r\n   *  .catch((error) => {\r\n   *    // not a valid zip file\r\n   *  })\r\n   * ```\r\n   */\r\n  isValidZipFile(zip: File) {\r\n    const signatureSet = new Set(['504b34', '504b56', '504b78']); // zip file signatures\r\n    const rejectMessage =\r\n      'Seems like file which you have selected is not a valid zip file';\r\n    const blob = zip.slice(0, 4); // reading of first four bytes\r\n    return this.utilService\r\n      .readFileAsArrayBuffer(blob as File)\r\n      .then(value =>\r\n        this.fileTypeValidator(value, signatureSet, rejectMessage)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * This method checks whether a selected file is a jpeg file\r\n   * @returns {Promise<boolean>} Promise which returns a boolean value when resolved\r\n   * @param jpegFile jpeg file\r\n   */\r\n  isValidJpegFile(jpegFile: File) {\r\n    const signatureSet = new Set(['ffd8ffe0', 'ffd8ffe1', 'ffd8ffdB']);\r\n    const blob = jpegFile.slice(0, 4);\r\n    const rejectMessage =\r\n      'Seems like the file which you have selected is not a valid jpeg file';\r\n    return this.utilService\r\n      .readFileAsArrayBuffer(blob as File)\r\n      .then(value =>\r\n        this.fileTypeValidator(value, signatureSet, rejectMessage)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * This method checks wether a selected file is a dicom file\r\n   * @param dicomFile dicom file\r\n   * @returns {Promise<boolean>} Promise which returns a boolean value when resolved\r\n   */\r\n  isValidDicomFile(dicomFile: File) {\r\n    const signatureSet = new Set(['444943']);\r\n    const blob = dicomFile.slice(0, 10);\r\n    const rejectMessage =\r\n      'Seems like the file which you have selected is not a valid dicom file';\r\n    return this.utilService\r\n      .readFileAsArrayBuffer(blob as File)\r\n      .then(value =>\r\n        this.fileTypeValidator(value, signatureSet, rejectMessage)\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Returns the imaging bucket name\r\n   */\r\n  get imagingBucketName() {\r\n    return this.appConstants.buckets.imaging.BucketURL;\r\n  }\r\n\r\n  get imagingJpegBucketName() {\r\n    return this.appConstants.buckets.imaging.BucketURLJpeg;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * Extracts the contents of a zip file;\r\n   * Only takes first level files\r\n   * @param zip A zip file to extract\r\n   * @async\r\n   * @returns {Promise<Array<BLob, String>>} A promise that returns extracted files when resolved\r\n   */\r\n  private async fileContentExtractor(zip) {\r\n    const { files } = zip;\r\n    const extractedFiles = [];\r\n    const filesNames = Object.keys(files);\r\n    for (const fileName of filesNames) {\r\n      extractedFiles.push({\r\n        fileBlob: await files[fileName].async('blob'),\r\n        fileName\r\n      });\r\n    }\r\n    return extractedFiles;\r\n  }\r\n\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  private fileTypeValidator(value, signatureSet, rejectMessage) {\r\n    const uint = new Uint8Array(value); // making a 8 byte wide data view\r\n    const bytes = [];\r\n    uint.forEach(byte => {\r\n      bytes.push(byte.toString(16)); // converting each byte into hexadecimal number\r\n    });\r\n    const isValidFile = signatureSet.has(bytes.join(''));\r\n    if (isValidFile) {\r\n      return Promise.resolve(true);\r\n    } else {\r\n      return Promise.reject(\r\n        rejectMessage ||\r\n          'Seems like the file which you have selected is not valid file'\r\n      );\r\n    }\r\n  }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const ROLES = new Map([['Admin', 1], ['Technician', 2], ['Doctor', 3]]);\r\nexport const ROLES_TOKEN = new InjectionToken<Map<string, number>>(\r\n  'ROLES_TOKEN'\r\n);\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport { CanActivate, Router } from '@angular/router';\r\nimport { ROLES_TOKEN } from '@app/modules/imaging/services/roles-constants.service';\r\nimport { ImagingService } from '@app/modules/imaging/services/imaging.service';\r\nimport { UserService } from '@core/services/user.service';\r\n\r\n@Injectable()\r\nexport class ValidUserGuard implements CanActivate {\r\n  private roles: Map<string, number>;\r\n  constructor(\r\n    @Inject(ROLES_TOKEN) roles,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private imagingService: ImagingService\r\n  ) {\r\n    this.roles = roles;\r\n  }\r\n  canActivate() {\r\n    try {\r\n      const isValid = this.isValidUser();\r\n      if (!isValid) {\r\n        this.router.navigate(['no-access']);\r\n      } else {\r\n        return true;\r\n      }\r\n    } catch (e) {\r\n      this.router.navigate(['no-access']);\r\n    }\r\n  }\r\n\r\n  isValidUser() {\r\n    const user = this.userService.getUser();\r\n    const designationsList = user.designationsList.map(\r\n      ({ designation }) => designation\r\n    );\r\n    const userHighestRole = this.imagingService.getUserHighestRole(\r\n      this.roles,\r\n      designationsList\r\n    );\r\n    return !!userHighestRole;\r\n  }\r\n\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { NgControl } from '@angular/forms';\r\n\r\n@Directive({\r\n  selector: '[appDisableControl]'\r\n})\r\nexport class DisableControlDirective {\r\n  constructor(private ngControl: NgControl) {}\r\n  @Input()\r\n  set appDisableControl(disabledState: boolean) {\r\n    const action = disabledState ? 'enable' : 'disable';\r\n    this.ngControl.control[action]();\r\n  }\r\n}\r\n"],"sourceRoot":""}